Lab 3 Lisp:

1)
	a. the expression translates to (5-1) + (3+7) which equals 14 so the expression would return 14
	b. The expression creates a list with the values 1 and 5 in it (since 2+3 is 5)
	c. The expression will will evaluate (+ 1 2) if 1 is a list otherwise if 1 is not a list then it 
	   will evaluate (+3 4)
	d. The expression creates a list. The list's first element is t (true) if 3 is a list otherwise
	   the list's first element will be nil since (nil and t) will eveluate to nil. Then no matter
	   what the list's second element is (+ 1 2) which is 3.

2) 
	1. (cons 'a '(b c))
	2. (cons 'a (cons 'b '(c)))
	3. (cons 'a (cdr '(a b c)))

3)
	(defun fourth-item (x)
    		(car(cdr(cdr(cdr x)))))


	(write(fourth-item '(a b c d e)))

4)
	(defun check-comparison (item1 item2)
    		(if (> item1 item2)
        		item1
        		item2))


	(write(check-comparison 22 53))

5)
	a. This function loops through a list and returns true if there is a nil anywhere in it
	b. Lets the user know what element in a list the number they choose was. So the user passes 
	   two arguments, the first one the number they are looking for and the second one is the 
	   list they are looking for the number in. The function then returns either the place that number is in
	   the list or nil if the number is not in the list. 

6)
	a. x could be the car function
	b. x could be the or function
	c. x could be apply function

7)
	(defun is-list (lst)
  	(if lst
      	  (or (listp (car lst))
              (is-list (cdr lst)))))

	(print(is-list '(a b s list '() b c)))

8)
	a. Iterative:
	(defun iter-dot (x)
    		(do ((i 0 (+ i 1))) ((= i x))
    		(format t ".")))

	(iter-dot 10)

	Recursive:
	(defun recur-dot (x)
    	(if (plusp x)
        	(progn
            	(format t ".")
            	(recur-dot(- x 1)))))

	(recur-dot 10)

	b. Iterative:

	(defun iter-list-a (ls)
    	(do ((ls1 ls (cdr ls1))
         	(n 0 (+ n (if (eq (car ls1) 'a)
                       1 
                       0 ))))
        	((not ls1) n)))

	(write(iter-list-a '(a b b a c)))

	Recursive:

	(defun recur-list-a (ls)
    	(if ls 
       	   (+ (if (eql (car ls) 'a) 1 0)(recur-list-a (cdr ls))) 
           0))
    
    
	(write(recur-list-a '(a b a a c)))

9)
	
	a. Their issue here is that Lisp is a a functional prgramming language so when they are trying
	   to remove the nils from the list and then adding up the numbers it wont work because when 
	   removing the nils it only returns what the list would look like after removing them, it does not 
	   permenately change the list. Here is the correction:
	
	(defun summit (lst)
    		(apply #'+ (remove nil lst)))
    
	(write(summit '(2 5 6 nil 8)))

	b. The terminate condition needs to be ommitted. Here is the correction:

	(defun summit (lst)
   	(if lst
      		(+ (or (car lst) 0) (summit (cdr lst)))
     		0))

	(write(summit '(2 5 13 nil 8)))

10) 

	(defun list-of-num (n)
   	(do ((i 1 (+ i 1))) ((> i n))
       		(format t "~A " i)))

	(list-of-num 5)

11)

	(defun remove-multiples (k lst)
    	(dolist (obj lst)
        	(setf i (if (/= (mod obj k) 0)
                    obj
                    "_")) (format t "~A " i)))           

	(remove-multiples 5 '( 10 6 8 5 3 4 25 68 95 22 46))

12)

	I did the best I could on this one, but ultimately I could not figure out why lisp
	was not printing the values correctly......Bunches of fun!

	(defun sieve (up)
    	(loop for i from 1 to up
         	do (print (loop for j from 2 to i
                    do (print (if (/= (mod j i) 0)
                        j
                        nil))))))


	(write(sieve 15))
	


