CS1 Stick Game:

I picked this assignment because the game felt like an easy enough game to implement. It is a game between 
the computer and the player at which either can only pick up 1, 2, or 3 sticks. The person to pick up the last stick
loses. Therefore, my thought process was tht the code would involve a simple random number generator or some
type of arthemetic with some logic for the computer to try and not pick up the last stick. 

This code was not super bad in rust, for some reason the most issues I had with implementing this code was getting the
imported libraires to work. Other then that sometimes the casting that rust uses can be a little strange.
Thankfully I have worked with C++ before and it looks very similar to that in some areas, which can 
be at times a bit unfriendly but also not so bad if you know what to expect. Overall, rust had a buff
reader for user intake, and I applied some simple math to the computer and all worked out very well. One
frustrating thing is that I could not for the life of me get the random number library to correclty import,
so I decided to not use random numbers afterall. 

CS1 ISBN Marker:

I picked this assignment because the first assignment I did involved recieving user input; therefore, 
I thought this would be another easy assignemnt since I already know how to take user input. Furthermore,
I thought computing the marker for an isbn number was simple enough. The directions on what to do for this
assignment were fairly clear. Get 9 digits of isbn from user then calculate marker and spit out real isbn 
back.

This code was not bad in rust either. I found the iteration farily easy. However, I did have a tiny issue on
performing computation between my iterator and the elements of my array. I then had to cast my iterator, 
and on top of that I had to make sure all of my values were of the sized type of an int and not an unsized.
Which confuses me just a little, but I would sya these were my only issues, just fighting around the 
casting of different variale within my code.  

CS0 Test Me- Roll Dice:

I chose this problem to do because it looked extremely easy. My thought process was that all I would
need to do is randomly generate a number from 1 to 6 twice and then add them up. Therefore, the process
seemed as simple as it could eveer be.

Rust made this much harder than it needed to be. In the end it still did not take me a long time to
get working code, but importing libraries is strange. In my other code examples where I was grabbing
user input, all I simply had to do was use the library at the top of my code. However, for generating
random numbers this is not the same. I had to generate cargo, inport the random library into the cargo, 
and then use that library imported into the cargo in my main rust file. It just seemed overcomplicated
for simply importing a library to generate a random number. 

CS0 Test Me- Rock Paper Scizzors:

Again I chose this problem because I have had plenty of work with user input. Furthermore, I had
already dealt with the stick game earlier. Therefore, another game (and a simple one at that) seemed
like a smart idea considering I already know the ins and outs of grabbing user input and pairing it 
against other data to present information.

The more I have been coding in rust the easier it has began to feel. Especially since I have been working
on similar code each time. Rust does fairly well with user input as well as conditionals. The issue I ran
into was attempting to collect string data from a user and comparing that. This is because rust uses
pointers just like C and I did not feel like opening that can of worms again. Therefore, I stuck to what
I already knew well which was grabbing numbers from the user. 

